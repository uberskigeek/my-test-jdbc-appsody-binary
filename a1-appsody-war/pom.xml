<?xml version='1.0' encoding='utf-8'?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent><!--required parent POM -->
		<groupId>dev.appsody</groupId>
		<artifactId>java-openliberty</artifactId>
		<version>[0.2, 0.3)</version>
		<relativePath />
	</parent>

	<groupId>g1</groupId>
	<artifactId>a1-appsody-war</artifactId>
	<version>1.0</version>
	<packaging>war</packaging>

    <properties>
        <wlp.user.dir>${wlp.install.dir}/usr</wlp.user.dir>
    </properties>

	<dependencies>
		<!-- Aggregate of MicroProfile APIs -->
		<dependency>
			<groupId>org.eclipse.microprofile</groupId>
			<artifactId>microprofile</artifactId>
			<version>3.2</version>
			<type>pom</type>
			<scope>provided</scope>
		</dependency>
		<!-- For tests -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-rs-client</artifactId>
			<version>3.2.6</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-rs-extension-providers</artifactId>
			<version>3.2.6</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.glassfish</groupId>
			<artifactId>javax.json</artifactId>
			<version>1.0.4</version>
			<scope>test</scope>
		</dependency>
		<!-- Test -->
		<dependency>
			<groupId>commons-httpclient</groupId>
			<artifactId>commons-httpclient</artifactId>
			<version>3.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.8.5</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>8.0.15</version>
			<scope>runtime</scope>
		</dependency>
		<!-- Support for JDK 9 and above -->
		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>2.3.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-core</artifactId>
			<version>2.3.0.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-impl</artifactId>
			<version>2.3.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>javax.activation</groupId>
			<artifactId>activation</artifactId>
			<version>1.1.1</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<profiles>
		<profile>
			<id>start-ol-container</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>0.20.1</version>
						<configuration>
							<images>
								<image>
									<alias>open-liberty</alias>
									<name>dev.local/a1-appsody-war:latest</name>
									<run>
										<wait>
											<time>15000</time>
										</wait>
										<ports>
											<port>7777:7777</port>
											<port>9080:9080</port>
											<port>9443:9443</port>
										</ports>
									</run>
								</image>
							</images>
							<skip>${skipTests}</skip>
							<!-- <keepContainer>true</keepContainer> -->
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	<build>
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.20.1</version>
				<configuration>
					<images combine.children="append">
						<image>
							<alias>database</alias>
							<name>mysql:8.0.15</name>
							<run>
								<wait>
									<!-- There is a known issue in the plugin preventing any reasonable 
										ability to wait for mysql to start when on Mac. Waiting 15 seconds does the 
										trick for now -->
									<time>30000</time>
								</wait>
								<env>
									<MYSQL_ROOT_PASSWORD>abc123</MYSQL_ROOT_PASSWORD>
									<MYSQL_DATABASE>testdb</MYSQL_DATABASE>
									<MYSQL_USER>mysql</MYSQL_USER>
									<MYSQL_PASSWORD>mysql</MYSQL_PASSWORD>
								</env>
								<ports>
									<port>3306:3306</port>
								</ports>
							</run>
						</image>

					</images>
					<skip>${skipTests}</skip>
					<!-- <keepContainer>true</keepContainer> -->
				</configuration>
				<executions>
					<execution>
						<id>start</id>
						<phase>integration-test</phase>
						<goals>
							<goal>start</goal>
						</goals>
					</execution>
					<execution>
						<id>stop-after</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.1.1</version>
				<executions>
					<execution>
						<id>copy-resource-adapter-artifacts</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${wlp.user.dir}/servers/defaultServer/resources</outputDirectory>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
							<excludeTransitive>true</excludeTransitive>
							<includeTypes>jar</includeTypes>
							<includeGroupIds>mysql</includeGroupIds>
						</configuration>
					</execution>
					<!-- example of how to move a shared library dependency -->
					<execution>
						<id>copy-shared-library-artifacts</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${wlp.user.dir}/servers/defaultServer/lib/global</outputDirectory>
							<overWriteReleases>true</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
							<includeTypes>jar</includeTypes>
							<includeGroupIds>org.eclipse.collections</includeGroupIds>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>${version.maven-war-plugin}</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
					<packagingExcludes>pom.xml</packagingExcludes>
				</configuration>
			</plugin>
			<!-- Enable liberty-maven plugin -->
			<plugin>
				<groupId>io.openliberty.tools</groupId>
				<artifactId>liberty-maven-plugin</artifactId>
				<configuration>
					<stripVersion>true</stripVersion>
					<serverStartTimeout>120</serverStartTimeout>
					<bootstrapProperties>
						<default.http.port>${http.port}</default.http.port>
						<default.https.port>${https.port}</default.https.port>
						<app.context.root>${app.name}</app.context.root>
					</bootstrapProperties>
				</configuration>
			</plugin>
			<!-- Plugin to run unit tests -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${version.maven-surefire-plugin}</version>
				<executions>
					<execution>
						<phase>test</phase>
						<id>default-test</id>
						<configuration>
							<excludes>
								<exclude>**/it/**</exclude>
							</excludes>
							<reportsDirectory>
								${project.build.directory}/test-reports/unit
							</reportsDirectory>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<skipTests>${skipTests}</skipTests>
				</configuration>
			</plugin>
			<!-- Plugin to run functional tests -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>${version.maven-failsafe-plugin}</version>
				<executions>
					<execution>
						<id>default-cli</id>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
						<configuration>
							<systemPropertyVariables>
								<test_http_port>9080</test_http_port>
							</systemPropertyVariables>
							<includes>
							<!--  -->
								<include>**/EndpointIT.java</include> 
								<include>**/MysqlHealthCheckIT.java</include>
							</includes>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<summaryFile>
						${project.build.directory}/test-reports/it/failsafe-summary.xml
					</summaryFile>
					<reportsDirectory>
						${project.build.directory}/test-reports/it
					</reportsDirectory>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
